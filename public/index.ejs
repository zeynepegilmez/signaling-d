<!doctype html>
<html lang="en">
	<head>
		<title>O'Reilly Introduction to WebRTC</title> 
		<script src="/socket.io/socket.io.js"></script>
	</head>
	<body> Video Konuşması
		<video id="myVideoTag" autoplay></video>
		<video id="theirVideoTag" autoplay></video>

		<div> Dosya Aktarımı
			<input type="file" id="sendFile"/><br/>
			<progress id="fileProgress" value=“1” max="100"></progress>
			<a id="receivedFileLink"></a>
			<hr>
		</div>
		<div>
			<label>İsim: </label><input id="myName" type="text"/>
			<label>Soyisim: </label><input id="myMessage" type="text"/>
			<input id="sendMessage" type="submit"/>
			<hr>
			<div id="chatArea">Message Output:</br></div>
			<hr>
			<div id="signalingArea">Signaling Messages:</br></div>
		</div>
		
		<script>
			var myVideoArea = document.querySelector("#myVideoTag");
			var theirVideoArea = document.querySelector("#theirVideoTag");
			var myName = document.querySelector("#myName");
			var myMessage = document.querySelector("#myMessage");

			var sendMessage = document.querySelector("#sendMessage");
			var chatArea = document.querySelector("#chatArea");
			var signalingArea = document.querySelector("#signalingArea");

			var sendFile = document.querySelector("input#sendFile");
			var fileProgress = document.querySelector("progress#fileProgress");
			var downloadLink = document.querySelector('a#receivedFileLink');

			var ROOM = "chat";
			var SIGNAL_ROOM = "signal_room";		
			var FILES_ROOM = "files";
			
			var configuration = {
				'iceServers': [{
					'url': 'stun:stun.l.google.com:19302'
				}]
			};
			var rtcPeerConn;


			var dataChannelOptions={
				ordered:false, //TCP veya UDP olduğuna karar verir. Şimdi false değerinde olduğundan UDP kullanarak aktarım gerçekleştiriyor
				maxRetransmitTime:1000,
			};

			var dataChannel;
			var receivedFileName;
			var receivedFileSize;
			var fileSize=0;
			var fileBuffer=[]; //resim gönderilirken buffer halinde tutulan dizi

			io = io.connect();

			io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM, "files_room": FILES_ROOM});
			
			//Send a first signaling message to anyone listening
			//This normally would be on a button click
			io.emit('signal',{"type":"user_here", "message":"Çağrı için hazırmısın?", "room":SIGNAL_ROOM});
			
			io.on('signaling_message', function(data) {
				displaySignalMessage("Signal alındı: " + data.type);
				
				//Setup the RTC Peer Connection object
				if (!rtcPeerConn)
					startSignaling();
					
				if (data.type != "user_here") {
					var message = JSON.parse(data.message);
					if (message.sdp) {
						rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
																												// eğer bir teklif alındıysa cevap oluşturmalıdır. Cevap için yine yerel tanımlamalara ihtiyacımız var
																												if (rtcPeerConn.remoteDescription.type == 'offer') {
																													rtcPeerConn.createAnswer(sendLocalDesc, logError);
																												}
																											}, logError);
					}
					else {
						rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
					}
				}


				
			}); //signaling message
			
			//tüm soketlere gönderilen bilgileri alıp kullanıyor.
			io.on('files',function(data){
					receivedFileName=data.filename;
					receivedFileSize=data.filesize;

					displaySignalMessage("dosya websoket üzerinden aktarılıyor"+receivedFileName + " (" + receivedFileSize + ")");
				});

			//
			function startSignaling() {
				displaySignalMessage("starting signaling...");
				
				rtcPeerConn = new webkitRTCPeerConnection(configuration,null); //null yerine ne alıyor normalde

				//veri yolu kanalı oluşturuyor. RTC'de Text mesajlarını veri yolu üzerinden göndermemizi sağlıyor.
				dataChannel =rtcPeerConn.createDataChannel('textMessages',dataChannelOptions); //yukarıda belirttiğimiz özelliklerle textmessages ismiyle veri yolu oluşturuluyor.
				dataChannel.onopen=dataChannelStateChanged; //veri yolu açıldığında
				rtcPeerConn.ondatachannel=receiveDataChannel;//veri yolu işlemdeyken

				
				// Bir eşten diğerine  ice candidate gönderirken
				rtcPeerConn.onicecandidate = function (evt) {
					if (evt.candidate)
						io.emit('signal',{"type":"ice candidate", "message": JSON.stringify({ 'candidate': evt.candidate }), "room":SIGNAL_ROOM});
					displaySignalMessage(" ice candidate işlemi tamamlandı...");
				};
				
				// turum anlaşması gerektiren bir değişiklik olduğunda 'negotiationneeded' eventi olayı tetiklenir. Bu görüşme teklifçi olarak yapılmalıdır, çünkü bazı oturum değişiklikleri cevaplayıcı olarak müzakere edilemez.
				rtcPeerConn.onnegotiationneeded = function () {
					displaySignalMessage(" negotiation başladı");
					rtcPeerConn.createOffer(sendLocalDesc, logError);
				}
				
				// video elementinde gösterilen remote stream ekleniyor 
				rtcPeerConn.onaddstream = function (evt) {
					displaySignalMessage("Diğer streamler ekleniyor...");
					theirVideoArea.src = URL.createObjectURL(evt.stream);
				};
				
				//local stream alınıyor.vşdeo etiketi sayesinde gösteriliyor ve gönderiliyor
				navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
				navigator.getUserMedia({
					'audio': false,
					'video': {
						mandatory: {
							minWidth: 320,
							maxWidth: 320,
							minHeight: 180,
							maxHeight: 180
						}
					}
				}, function (stream) {
					displaySignalMessage("going to display my stream...");
					myVideoArea.src = URL.createObjectURL(stream);
					rtcPeerConn.addStream(stream);
				}, logError);
			  
			}
			
			function dataChannelStateChanged() {
				if (dataChannel.readyState=='open') {
					displaySignalMessage('data Channel açıldı');
					dataChannel.onmessage=receiveDataChannelMessage;
				}
			}
			function receiveDataChannel(event) {
				displaySignalMessage('data channel alındı');
				dataChannel=event.channel;
				dataChannel.onmessage=receiveDataChannelMessage;
			}

			function receiveDataChannelMessage(event) {
				displaySignalMessage('Veri yolundan mesaj geldi');
				displayMessage('Veri yolundan gelen : '+event.data);

				fileBuffer.push(event.data);
				fileSize += event.data.byteLength;
				fileProgress.value = fileSize;
				
				//Provide link to downloadable file when complete
				if (fileSize === receivedFileSize) {
					var received = new window.Blob(fileBuffer);
					fileBuffer = [];

					downloadLink.href = URL.createObjectURL(received);
					downloadLink.download = receivedFileName;
					downloadLink.appendChild(document.createTextNode(receivedFileName + "(" + fileSize + ") bytes"));
				}
 
			}

			function sendLocalDesc(desc) {
				rtcPeerConn.setLocalDescription(desc, function () {
					displaySignalMessage("sending local description");
					io.emit('signal',{"type":"SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room":SIGNAL_ROOM});
				}, logError);
			}
			
			function logError(error) {
				displaySignalMessage(error.name + ': ' + error.message);
			}
			
			io.on('announce', function(data) {
				displayMessage(data.message);
			});
			
			io.on('message', function(data) {
				displayMessage(data.author + ": " + data.message);
			});
			
			function displayMessage(message) {
				chatArea.innerHTML = chatArea.innerHTML + "<br/>" + message;
			}
			
			function displaySignalMessage(message) {
				signalingArea.innerHTML = signalingArea.innerHTML + "<br/>" + message;
			}
			
			sendMessage.addEventListener('click', function(ev){
				io.emit('send', {"author":myName.value, "message":myMessage.value, "room":ROOM});
				 dataChannel.send(myName.value +' '+ myMessage.value +' dedi');
				ev.preventDefault();
			}, false);
			
			sendFile.addEventListener('change', function(ev){
				var file = sendFile.files[0];
				displaySignalMessage("sending file " + file.name + " (" + file.size + ") ...");
				io.emit('files',{"filename":file.name, "filesize":file.size, "room":FILES_ROOM});
				
				fileProgress.max = file.size;
				var chunkSize = 16384;
				var sliceFile = function(offset) {
					var reader = new window.FileReader();
					reader.onload = (function() {
						return function(e) {
							dataChannel.send(e.target.result);
							if (file.size > offset + e.target.result.byteLength) {
								window.setTimeout(sliceFile, 0, offset + chunkSize);
								}
							fileProgress.value = offset + e.target.result.byteLength;
						};
					})(file);
					var slice = file.slice(offset, offset + chunkSize);
					reader.readAsArrayBuffer(slice);
				};
				sliceFile(0);		
			
			}, false);

			
			
		</script> 
	</body>
</html>